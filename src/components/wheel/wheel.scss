/// @param {Integer} $item-count - Number of items on the circle
/// @param {Length} $circle-size - Large circle size
/// @param {Length} $item-size - Single item size
@mixin on-circle($item-count, $circle-size, $item-size) {
  position: relative;
  width:  $circle-size;
  height: $circle-size;
  padding: 0;
  border-radius: 50%; 
  list-style: none;       
  
  > * {
    display: block;
    position: absolute;
    top:  50%; 
    left: 50%;
    width:  $item-size;
    height: $item-size;
    margin: -($item-size / 2);
  
    $angle: (360 / $item-count);
    $rot: 270;

    @for $i from 1 through $item-count {
      &:nth-of-type(#{$i}) {
        transform: 
          rotate($rot * 1deg) 
          translate($circle-size / 2) 
          rotate($rot * -1deg);
      }

      $rot: $rot + $angle;
    }
  }
}

.circle-container {
  @include on-circle($item-count: 26, $circle-size: 25em, $item-size: 2.5em); 
  margin: 2em auto 0;
  //border: solid 5px lightgrey;
  
  div { 
    display: block; 
    max-width: 100%; 
    border-radius: 50%;
    transition: .15s;
    background-color: blueviolet;
    border: solid 5px blueviolet;
    
    // &:hover,
    &.initial {
      filter: grayscale(70%);
    }
    &.active {
      border: solid 5px blue;
      background-color: blue;
      filter: grayscale(0);
    }
    &.correct {
      border: solid 5px green;
      background-color: green;
    }
    &.wrong {
      border: solid 5px red;
      background-color: red;
    }
  }
  
}